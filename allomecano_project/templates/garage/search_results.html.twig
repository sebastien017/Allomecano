{% extends 'base.html.twig' %}

{% block title %}Allomecano | Résultat de la recherche{% endblock %}

{% block body %}

<section class="section is-vcentered no-padding-top">
{% if (garages == null) %}
<div class="column is-12 is-vcentered has-text-centered">
	<h1 class="is-size-5"><i class="far fa-eye-slash mr-1"></i>Aucun résultat à proximité de {{ address }}</h1><br>
	<a href="{{ path('home') }}" class="button is-success"><i class="fas fa-home mr-1"></i>Retour à l'accueil</a>
</div>
{% else %}
<ul class="steps">
  <li class="step-item is-info">
    <div class="step-marker">
    </div>
    <div class="step-details is-info is-completed">
      <p class="step-title">Choisir un professionnel</p>
      <p>Je choisis le professionnel qui s'occuper de mon véhicule.</p>
    </div>
  </li>
  <li class="step-item is-info">
    <div class="step-marker"></div>
    <div class="step-details">
      <p class="step-title">Choisir un créneau horaire</p>
      <p>Je choisis le créneau horaire de mon futur rdv.</p>
    </div>
  </li>
  <li class="step-item is-primary">
    <div class="step-marker">
      <span class="icon">
        <i class="fa fa-flag"></i>
      </span>
    </div>
    <div class="step-details">
      <p class="step-title">Confirmer mon rdv</p>
      <p>Un résumé de mes choix apparaît, si tout est ok je peux valider.</p>
    </div>
  </li>
</ul>
</section>

<section class="section is-vcentered flex-1 no-padding-top">

<div class="column is-12 is-vcentered is-size-5">
<i class="fas fa-search-location mr-1"></i>Résultats à proximité de {{ address }} (< 50km)
</div>

<div class="columns is-mobile is-12 is-multiline has-text-centered">
<div class="column is-6-desktop is-12-mobile">
		<div class="is-sticky">
			<div id="map" class="is-vcentered">
			</div>
		</div>
</div>

<div class="column is-vcentered is-10-mobile">
	{% for garage in garages  %}
		<div class="search-garage-infos" data-id="{{ garage.id }}">
		{% if (garage.distance != null) %}
			<div class="distance-garage">
				<i class="fas fa-shoe-prints mr-1"></i>{{ garage.distance }}km
			</div>
	{% endif %}
		<h3>{{ garage.name }}
		</h3>
	{% if garage.comments|length > 0 %}
		<p>Note moyenne sur {{ garage.comments|length }} avis :</p>
		{% include 'partials/rating.html.twig' with {'rating': garage.avgRatings } %}
	{% endif %}
		<p>{{ garage.adress }}</p>
		<a href="{{ path('reservation', {id: garage.id }) }}" class="button is-success mt-1"><i class="fas fa-calendar-check mr-1"></i> Prendre rendez-vous</a>
		<a href="{{ path('single_garage', {id: garage.id }) }}" class="button is-success mt-1"><i class="fas fa-address-card mr-1"></i> Profil du professionnel</a>
		</div>
	{% endfor %}
</div>
</div>
</section>

<script
  src="https://code.jquery.com/jquery-3.4.1.min.js"
  integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
  crossorigin="anonymous"></script>
<script src="https://maps.google.com/maps/api/js?key=AIzaSyAa_XzBtUTRBtVf2yBNiqYhT1bvBJX_Xoo" type="text/javascript"></script>

<script>
		map = new google.maps.Map(document.getElementById("map"), {
		center: new google.maps.LatLng({{ zoomLatitude }}, {{ zoomLongitude }}),
		zoom: 10,
		mapTypeId: google.maps.MapTypeId.ROADMAP,
		mapTypeControl: true,
		scrollwheel: true,
		mapTypeControlOptions: {
			style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR
		},
			navigationControl: true,
			navigationControlOptions: {
			style: google.maps.NavigationControlStyle.ZOOM_PAN
		}
		});
		// Variable détenant le dernier objet marker cliqué via la (map) ou du DOM (div search-garage-infos) mouseover
		let lastMarker;
		// Mise en place de geocoder qui permet de récupérer les coordonnées gps par rapport à une adresse
		geocoder = new google.maps.Geocoder();
		var infowindow = new google.maps.InfoWindow();
		// On parcourt l'objet garages
		{% for garage in garages %}
		{
			geocoder.geocode({ 'address': "{{ garage.adress }}" }, function (results, status) 
			{
        		var latLng = {lat: results[0].geometry.location.lat (), lng: results[0].geometry.location.lng ()};

        		if (status == 'OK') 
				{	
					// Ajout du marqueur sur la map
            		var marker{{ garage.id }} = new google.maps.Marker({
                	position: latLng,
                	map: map,
					scaledSize: new google.maps.Size(38, 38),
					icon: {
      					url: "{{ asset('assets/img/wrench.png') }}"
    				}
            		});

					// On sélectionne la div dans le DOM correspondant au même id
					let garageDOM = document.body.querySelector('.search-garage-infos[data-id="{{ garage.id }}"]');
					
					// Evenement mouseover sur les div
					garageDOM.addEventListener("mouseover", function()
					{
						marker{{ garage.id }}.setIcon('{{ asset('assets/img/wrench-blue.png') }}');

						// Le dernier marqueur reprend son icone d'origine
						if (lastMarker !== undefined && lastMarker !== marker{{ garage.id }})
						{
							lastMarker.setIcon('{{ asset('assets/img/wrench.png') }}');
						}

						// On remplit le lastMarker avec l'objet marker actuel
						lastMarker = marker{{ garage.id }};

						// On récupère les élements dans le DOM contenant la class search-garage-infos et on supprime les bordures éventuelles déjà présentes
						var elements = document.body.querySelectorAll('.search-garage-infos[data-id]').forEach(function (element)
						{
							element.classList.remove('borderIsBlue');
						});
				
						garageDOM.classList.add('borderIsBlue');

						map.setCenter(new google.maps.LatLng(latLng));

						map.setZoom(15);
					});

					// Ajout d'un evenement click sur le marqueur
					google.maps.event.addListener(marker{{ garage.id }}, 'click', function(){
        			// On cherche dans le DOM l'element en rapport avec l'id du garage actuel
					var div = document.body.querySelector('.search-garage-infos[data-id="{{ garage.id }}"]');
					// On cherche si un des élement dans le DOM possède déjà la classe
					var elements = document.body.querySelectorAll('.search-garage-infos[data-id]').forEach(function (element)
					{
						element.classList.remove('borderIsBlue');
					});

					// On change de couleur le marqueur cliqué
					marker{{ garage.id }}.setIcon('{{ asset('assets/img/wrench-blue.png') }}');

					// Le dernier marqueur reprend son icone d'origine
					if (lastMarker !== undefined && lastMarker !== marker{{ garage.id }})
					{
						lastMarker.setIcon('{{ asset('assets/img/wrench.png') }}');
					}

					// On remplit le lastMarker avec l'objet marker actuel
					lastMarker = marker{{ garage.id }};
					
					// On ajoute une classe à l'element
					div.classList.add("borderIsBlue");

					// Animation : Scroll jusqu'à la div
					div.scrollIntoView({ behavior: 'smooth' });
					});
        		} 
				else 
				{
            		console.log('Geocode was not successful for the following reason: ' + status);
        		}
    		});
		}

		{% endfor %}
		
</script>
{% endif %}
{% endblock %}

